//(c) Copyright 2015 Pivotal Software, Inc. All Rights Reserved.
'use strict';

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fs = require('fs');
var path = require('path');
var File = require('vinyl');
var jasmineCore = require('jasmine-core');

function resolveJasmineFiles(directoryProp, fileNamesProp) {
  var directory = jasmineCore.files[directoryProp];
  var fileNames = jasmineCore.files[fileNamesProp];
  return fileNames.map(function (fileName) {
    return path.resolve(directory, fileName);
  });
}

var inlineTagExtensions = { '.css': 'style', '.js': 'script' };

var htmlForExtension = {
  '.js': function js(filePath) {
    return '<script src="' + filePath + '"></script>';
  },
  '.css': function css(filePath) {
    return '<link href="' + filePath + '" rel="stylesheet" type="text/css"></link>';
  },
  '_default': function _default() {
    return '';
  }
};

var privates = new _weakMap2.default();

var SpecRunner = function (_File) {
  (0, _inherits3.default)(SpecRunner, _File);

  function SpecRunner() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    (0, _classCallCheck3.default)(this, SpecRunner);

    var _this = (0, _possibleConstructorReturn3.default)(this, _File.call(this, { path: '/specRunner.html', base: '/' }));

    _this.contents = new Buffer('<!DOCTYPE html>');
    var profile = options.profile;
    var console = options.console;
    var sourcemappedStacktrace = options.sourcemappedStacktrace;

    var useSourcemappedStacktrace = !console && sourcemappedStacktrace;
    privates.set(_this, { files: new _set2.default() });
    [].concat(resolveJasmineFiles('path', 'cssFiles'), [useSourcemappedStacktrace && 'stylesheets/sourcemapped_stacktrace_reporter.css'], resolveJasmineFiles('path', 'jsFiles'), [profile && require.resolve('jasmine-profile-reporter/browser.js')], console ? [require.resolve('jasmine-json-stream-reporter/browser.js'), 'boot.js'] : resolveJasmineFiles('bootDir', 'bootFiles'), [profile && !console && 'reporters/add_profile_reporter.js', useSourcemappedStacktrace && require.resolve('sourcemapped-stacktrace/dist/sourcemapped-stacktrace.js'), useSourcemappedStacktrace && 'reporters/add_sourcemapped_stacktrace_reporter.js']).filter(Boolean).forEach(function (fileName) {
      return _this.inlineFile(fileName);
    });
    return _this;
  }

  SpecRunner.prototype.inlineFile = function inlineFile(filePath) {
    var fileContents = fs.readFileSync(path.resolve(__dirname, filePath), { encoding: 'utf8' });
    var fileExtension = inlineTagExtensions[path.extname(filePath)];
    this.contents = Buffer.concat([this.contents, new Buffer('<' + fileExtension + '>' + fileContents + '</' + fileExtension + '>')]);
    return this;
  };

  SpecRunner.prototype.addFile = function addFile(filePath) {
    var _privates$get = privates.get(this);

    var files = _privates$get.files;

    if (files.has(filePath)) return this;
    files.add(filePath);
    var fileExtension = path.extname(filePath);
    this.contents = Buffer.concat([this.contents, new Buffer(htmlForExtension[fileExtension in htmlForExtension ? fileExtension : '_default'](filePath))]);
    return this;
  };

  return SpecRunner;
}(File);

module.exports = SpecRunner;