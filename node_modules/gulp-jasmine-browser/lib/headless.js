//(c) Copyright 2015 Pivotal Software, Inc. All Rights Reserved.
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lazypipe = require('lazypipe');

var _require = require('./server');

var listen = _require.listen;

var once = require('lodash.once');
var path = require('path');
var portfinder = require('portfinder');
var qs = require('qs');

var _require2 = require('child_process');

var spawn = _require2.spawn;

var thenify = require('thenify');

var _require3 = require('through2');

var through = _require3.obj;

var _require4 = require('through2-reduce');

var reduce = _require4.obj;

var ProfileReporter = require('jasmine-profile-reporter');
var TerminalReporter = require('jasmine-terminal-reporter');
var toReporter = require('jasmine-json-stream-reporter/to-reporter');
var split = require('split2');
var flatMap = require('flat-map');

var getPort = thenify(portfinder.getPort);

var DEFAULT_JASMINE_PORT = 8888;

var drivers = {
  phantomjs: require('./drivers/phantomjs'),
  phantomjs1: require('./drivers/phantomjs1'),
  slimerjs: require('./drivers/slimerjs'),
  _default: require('./drivers/phantomjs')
};

function onError(message) {
  try {
    var _require5 = require('gulp-util');

    var PluginError = _require5.PluginError;

    return new PluginError('gulp-jasmine-browser', { message: message, showProperties: false });
  } catch (e) {
    return new Error(message);
  }
}

function getServer(files) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var findOpenPort = options.findOpenPort;
  var _options$port = options.port;
  var port = _options$port === undefined ? DEFAULT_JASMINE_PORT : _options$port;

  if (findOpenPort) return getPort().then(function (port) {
    return listen(port, files, options);
  });
  return listen(port, files, options);
}

function defaultReporters(options, profile) {
  return [new TerminalReporter(options), profile && new ProfileReporter(options)].filter(Boolean);
}

function createServer(options) {
  var _options$driver = options.driver;
  var driver = _options$driver === undefined ? 'phantomjs' : _options$driver;
  var random = options.random;
  var throwFailures = options.throwFailures;
  var spec = options.spec;
  var seed = options.seed;
  var reporter = options.reporter;
  var profile = options.profile;
  var onCoverage = options.onCoverage;
  var _options$onConsoleMes = options.onConsoleMessage;
  var onConsoleMessage = _options$onConsoleMes === undefined ? function () {
    var _console;

    return (_console = console).log.apply(_console, arguments);
  } : _options$onConsoleMes;
  var opts = (0, _objectWithoutProperties3.default)(options, ['driver', 'random', 'throwFailures', 'spec', 'seed', 'reporter', 'profile', 'onCoverage', 'onConsoleMessage']);

  var query = qs.stringify({ catch: options.catch, random: random, throwFailures: throwFailures, spec: spec, seed: seed });

  var _drivers = drivers[driver in drivers ? driver : '_default']();

  var command = _drivers.command;
  var runner = _drivers.runner;
  var output = _drivers.output;

  var stream = lazypipe().pipe(function () {
    return reduce(function (memo, file) {
      return memo[file.relative] = file.contents, memo;
    }, {});
  }).pipe(function () {
    return through(function (files, enc, next) {
      return getServer(files, options).then(function (i) {
        return next(null, i);
      });
    });
  }).pipe(function () {
    return flatMap(function (_ref, next) {
      var server = _ref.server;
      var port = _ref.port;

      var stdio = ['pipe', output === 'stdout' ? 'pipe' : 1, output === 'stderr' ? 'pipe' : 2];
      var phantomProcess = spawn(command, [runner, port, query], { cwd: path.resolve(__dirname), stdio: stdio });
      phantomProcess.on('close', function () {
        return server.close();
      });
      ['SIGINT', 'SIGTERM'].forEach(function (e) {
        return process.once(e, function () {
          return phantomProcess && phantomProcess.kill();
        });
      });
      next(null, phantomProcess[output].pipe(split(null, JSON.parse, { objectMode: true })));
    });
  }).pipe(function () {
    return toReporter(reporter || defaultReporters(opts, profile), { onError: onError, onConsoleMessage: onConsoleMessage, onCoverage: onCoverage });
  });
  return stream();
}

function createServerWatch(options) {
  var files = {};
  var createServerOnce = once(function () {
    return getServer(files, options);
  });
  return lazypipe().pipe(function () {
    return through(function (file, enc, next) {
      files[file.relative] = file.contents;
      createServerOnce();
      next(null, files);
    });
  })();
}

function headless() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return createServer((0, _extends3.default)({ findOpenPort: true }, options));
}

module.exports = {
  headless: headless,

  server: function server() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    return createServerWatch(options);
  },
  slimerjs: function slimerjs() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    return headless((0, _extends3.default)({ driver: 'slimerjs' }, options));
  },
  phantomjs: function phantomjs() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    return headless((0, _extends3.default)({ driver: 'phantomjs' }, options));
  }
};