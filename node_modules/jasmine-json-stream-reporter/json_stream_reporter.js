'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var uuid = require('uuid');

function generateId(name) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var id = _ref.id;

  return [this.uuid, id, name].filter(Boolean).join(':');
}

var JsonStreamReporter = function () {
  function JsonStreamReporter() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, JsonStreamReporter);

    var _options$header = options.header;
    var header = _options$header === undefined ? JsonStreamReporter.defaultHeader : _options$header;


    this.specResults = [];
    this.uuid = uuid.v4();

    /* eslint-disable no-console */
    this.print = options.print || function () {
      var _console;

      (_console = console).log.apply(_console, arguments);
    };
    this.onComplete = options.onComplete || function () {};
    /* eslint-enable no-console */
    this.format = options.format || function (obj) {
      return '' + header + JSON.stringify(obj);
    };
  }

  JsonStreamReporter.prototype.consoleMessage = function consoleMessage(message) {
    var obj = { id: generateId.call(this, 'consoleMessage'), message: message };
    this.print(this.format(obj));
  };

  JsonStreamReporter.prototype.coverage = function coverage(_coverage) {
    var obj = { id: generateId.call(this, 'coverage'), coverage: _coverage };
    this.print(this.format(obj));
  };

  JsonStreamReporter.prototype.suiteStarted = function suiteStarted(suite) {
    suite = _extends({}, suite, { id: generateId.call(this, 'suiteStarted', suite) });
    this.print(this.format(suite));
  };

  JsonStreamReporter.prototype.suiteDone = function suiteDone(suite) {
    suite = _extends({}, suite, { id: generateId.call(this, 'suiteDone', suite), specs: this.specResults });
    this.print(this.format(suite));
    this.specResults = [];
  };

  JsonStreamReporter.prototype.specStarted = function specStarted(spec) {
    spec = _extends({}, spec, { id: generateId.call(this, 'specStarted', spec) });
    this.print(this.format(spec));
  };

  JsonStreamReporter.prototype.specDone = function specDone(spec) {
    spec = _extends({}, spec, { id: generateId.call(this, 'specDone', spec) });
    this.print(this.format(spec));
    this.specResults.push(spec);
  };

  JsonStreamReporter.prototype.jasmineStarted = function jasmineStarted(specInfo) {
    specInfo = _extends({}, specInfo, { id: generateId.call(this, 'jasmineStarted') });
    this.print(this.format(specInfo));
  };

  JsonStreamReporter.prototype.jasmineDone = function jasmineDone(options) {
    this.onComplete(options);
  };

  return JsonStreamReporter;
}();

JsonStreamReporter.defaultHeader = '';


module.exports = JsonStreamReporter;